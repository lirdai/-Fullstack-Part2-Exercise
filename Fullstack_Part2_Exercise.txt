2.1 - 2.3 Exercise Course Contents

import React from "react";
import ReactDOM from "react-dom";


const App = () => {
	const course = {
		name: 'Half Stack application development',
		parts: [
			{
				name: 'Fundamentals of React',
				exercises: 10,
				id: 1
			},
			{
				name: 'Using props to pass data',
				exercises: 7,
				id: 2
			},
			{
				name: 'State of a component',
				exercises: 14,
				id: 3
			},
			{
				name: "Redux",
				exercises: 11,
				id: 4
			}
		]
	}

	
const Course = ({course}) => {
	return (
		<div>
			<h1>{course.name}</h1>
			<p>{course.parts[0].name}: {course.parts[0].exercises}</p>
			<p>{course.parts[1].name}: {course.parts[1].exercises}</p>
			<p>{course.parts[2].name}: {course.parts[2].exercises}</p>
			<p>{course.parts[3].name}: {course.parts[3].exercises}</p>
		</div>
	)
}	
	

const Sum = () => {
	
	const a = [];
	const reducer = (s, p) => {
		return (
			s + p
		)
	}
	
	for (let i = 0; i< course.parts.length; i++) {
		a.push(course.parts[i].exercises)
	}
	
	
	return (
		<div>
			<p><b>total of {a.reduce(reducer)} exercises</b></p>
		</div>
	)
}
	
	
	return (
		<div>
			<Course course={course} />
			<Sum />
		</div>
	)
}



ReactDOM.render(
  <App />, 
  document.getElementById('root'));



2.4 - 2.5 Exercise Course Contents

import React from "react";
import ReactDOM from "react-dom";


const App = () => {
	const courses = [
		{
			name: 'Half Stack application development',
			id: 1,
			parts: [
				{
					name: 'Fundamentals of React',
					exercises: 10,
					id: 1
				},
				{
					name: 'Using props to pass data',
					exercises: 7,
					id: 2
				},
				{
					name: 'State of a component',
					exercises: 14,
					id: 3
				},
				{
					name: 'Redux',
					exercises: 11,
					id: 4
				}
			]
		}, 
		{
			name: 'Node.js',
			id: 2,
			parts: [
				{
					name: 'Routing',
					exercises: 3,
					id: 1
				},
				{
					name: 'Middlewares',
					exercises: 7,
					id: 2
				}
			]
		}
	]


	const Row_One = () => {
		return (
			courses[0].parts.map(part => <p key = {part.id}>{part.name}: {part.exercises}</p>)
		)
	}

	
	const Row_Two = () => {
		return (
			courses[1].parts.map(part => <p key = {part.id}>{part.name}: {part.exercises}</p>)
		)
	}
	
	
	const Content = ({courses}) => {
		
		const a = [];
		const b = [];
		
		const reducer = (s, p) => {
			return (	
				s + p
			)
		}
		
		for (let i = 0; i < courses[0].parts.length; i++) {
			a.push(courses[0].parts[i].exercises)
		}
		
		for (let i = 0; i < courses[1].parts.length; i++) {
			b.push(courses[1].parts[i].exercises)
		}
		
		
		return (
			<div>
				<h3>{courses[0].name}</h3>
				<Row_One />
				<p><b> total of {a.reduce(reducer)} exercises </b></p>
				
				<br />
				<br />
				<br />
				
				<h3>{courses[1].name}</h3>
				<Row_Two />
				<p><b> total of {b.reduce(reducer)} exercises </b></p>
			</div>
		)
	}

	
	
	return (
		<div>
			<h1>Web Development Curriculum</h1>
			<Content courses = {courses} />
		</div>
	)
}



ReactDOM.render(
  <App />, 
  document.getElementById('root'));



2.6 - 2.10 The Phonebook 

import React, {useState} from "react";
import ReactDOM from "react-dom";


const Phonebook = [
	{ 
		id: 1,
		name: 'Arto Hellas', 
		number: "4328974539"
	},
	{
		id: 2,
		name: 'Ada Loverball', 
		number: "78656455676"
	},
	{
		id: 3,
		name: 'Dan Abramoy', 
		number: "7643657385"
	},
	{
		id: 4,
		name: 'Dai Daisy', 
		number: "3213563456"
	},
	{
		id: 5,
		name: 'Ma Yutao', 
		number: "2345678213"
	}
]


const Filter = (props) => {
	
	return (
		<div>
			Search By Name: <input 
								type = {props.type}
								value = {props.value} 
								onChange = {props.onChange} 
							/>
		</div>
	)
}


const InputName = (props) => {
	return (
		<div>
			name: <input 
						type = {props.type} 
						value = {props.value} 
						onChange = {props.onChange} 
					/>
		</div>
	)
}


const InputNumber = (props) => {
	return (
		<div>
			number: <input 
						type = {props.type} 
						value = {props.value} 
						onChange = {props.onChange} 
				    /> 	
		</div>
	)
}


const InputButton = (props) => {
	return (
		<div>
			<button type={props.type}>{props.text}</button>
		</div>
	)
}


const Content = (props) => props.personsToShow.map(person => <p key = {person.id}>{person.name}: {person.number}</p>)


const App = (props) => {
	const [ persons, setPersons] = useState(props.Phonebook) 
	
	const [ newName, setNewName ] = useState("")
	const [ newNumber, setNewNumber ] = useState("")
	const [ searchName, setSearchName ] = useState("")
	const [ filterChange, setFilterChange ] = useState(false) 
	
	
	const addNewName = (event) => {
		event.preventDefault()
		
		const personObject = {
			id: persons.length + 1, 
			name: newName,
			number: newNumber
		}
		
		const repeatOrNot = () => {
			for (let i = 0; i < persons.length; i++) {
				if (newName === persons[i].name) {
					window.alert(newName + " is already added to phonebook")
					
					setPersons(persons)
				}
				else {
					setPersons(persons.concat(personObject))
				}
			}
		}
		
		repeatOrNot()
		setNewName("")
		setNewNumber("")
	}
	
	
	const deleteName = (event) => {
		event.preventDefault()
		
		const a = persons.slice(0, persons.length-1)
		
		setPersons(a)
	}
	
	
	const handleNameChange = (event) => {
		console.log(event.target.value)
		setNewName(event.target.value)
	}
	
	
	const handleNumberChange = (event) => {
		console.log(event.target.value)
		setNewNumber(event.target.value)
	}
	
	
	const handleSearchName = (event) => {
		console.log(event.target.value)
		setSearchName(event.target.value)
		setFilterChange(true)
	}
	
	
	const filterItems = (query) => {
		const filter_result = persons.filter(person => person.name.toLowerCase().split(" ").join("").indexOf(query.toLowerCase()) !== -1)
		
		return filter_result
	}
	
	
	const personsToShow = filterChange
		? filterItems(searchName)
		: persons

		
	return (
		<div>
		
			<h2>Phonebook</h2>
			<div>
				<Filter type = "text" value = {searchName} onChange = {handleSearchName} />
			</div>
			
			
			<h3>Add A New Contact</h3>
			<div>
				<form onSubmit = {addNewName}>
				<InputName type = "text" value = {newName} onChange = {handleNameChange} />
				<br />
				<InputNumber type = "text" value = {newNumber} onChange = {handleNumberChange} />
				<br />
				<InputButton type = "submit" text = "Add" />
				</form>
			</div>
			
			<div>
			<br />
				<form onSubmit = {deleteName}>
				<InputButton type = "submit" text = "Delete" />
				</form>
			</div>
			
			<h3>Numbers</h3>
			<Content personsToShow = {personsToShow} />
			
		</div>
	)
}


ReactDOM.render(
  <App Phonebook = {Phonebook} />, 
  document.getElementById('root'));



2.11 The Phonebook

import React, { useState, useEffect } from 'react'
import ReactDOM from 'react-dom'
import axios from 'axios'


const App = () => {
	const [ persons, setPersons ] = useState([])
	
	useEffect(() => {
		axios
			.get("http://localhost:3001/persons")
			.then(response => setPersons(response.data))
		}, [])
	
	const List = () => {
		return (
			<div>
				{persons.map(person => <p key = {person.id}>{person.name}: {person.number}</p>)}
			</div>
		)
		
	}
	
	return (
		<div>
			<List />
		</div>
	)
}


ReactDOM.render(<App />, document.getElementById('root'))



2.12 - 2.14 Data for Countries

import React, { useState, useEffect } from 'react'
import ReactDOM from 'react-dom'
import axios from 'axios'


const App = () => {

	const [ nations, setNations ] = useState([])
	const [ searchNation, setSearchNation ] = useState("")
	const [ search, setSearch ] = useState(false)
	const [ weather, setWeather ] = useState([])

	
	useEffect(() => {
		axios
			.get("https://restcountries.eu/rest/v2/all")
			.then(response => setNations(response.data))
		}, [])
		
		
	useEffect(() => {
		axios
			.get("http://www.apixu.com/doc/Apixu_weather_conditions.json")
			.then(response => setWeather(response.data))
	}, [])
		
		
	const handleChange = (event) => {
		event.preventDefault()
	}


	const searchCountry = (event) => {
		console.log(event.target.value)
		setSearchNation(event.target.value)
		if (event.target.value === "") {
			setSearch(false)
		}
		else {
			setSearch(true)
		}
	}
	
	
	const handleClick = () => {
		console.log("view")
	}
	
	
	const Filter_results = (query) => {
		const results = nations.filter(nation => nation.name.toLowerCase().indexOf(query.toLowerCase()) !== -1 )
		
		return results
	}
	
	
	const displayToShow = search
		? Filter_results(searchNation)
		: nations
	
	
	const ShowAll = () => {
		
		if (search === false) {
			return null
		}
		
		else {
			if (displayToShow.length > 10) {
				return (
					<div>
						<p>Too Many Matches, Specify Another Filter</p>
					</div>
				)
			}
			else if (displayToShow.length <= 10 && displayToShow.length >= 2) {
				return (
					<div>
					
						{displayToShow.map(nation => {
							return (
								<div key ={nation.area}>
									<p key={nation.name}>{nation.name}</p>
									<button onClick = {handleClick}>Show</button>
								</div>
							)
						}		
						)}
						
					</div>
				)
			}
			else if (displayToShow.length === 1) {
				console.log(displayToShow)
				return (
					<div>
					
					
						<h2>{displayToShow[0].name}</h2>
						<p>Capital: {displayToShow[0].capital}</p>
						<p>Population: {displayToShow[0].population}</p>
			
			
						<h4>Languages</h4>
							<ul>
								{displayToShow[0].languages.map(one => <li key = {one.name}>{one.name}</li>)}
							</ul>
						
						
						<img src = {displayToShow[0].flag} alt = "" width = "130px" height = "100px" />
						
						
						<br />
						<h3>Weather in {displayToShow[0].capital}</h3>
						<p>Day: {weather[Math.floor(Math.random()*weather.length)].day}</p>
						<p>Night: {weather[Math.floor(Math.random()*weather.length)].night}</p>
					</div>
				)
			}
			else {
				return (
					<div>
						<p>Opps,there's something wrong about your searching...Please Try Again!</p>
					</div>
				)
			}
		}
	}
	
	
	return (
		<div>
			<form onSubmit = {handleChange}>
				Search by Country Name: <input type = "text" value = {searchNation} onChange = {searchCountry} />
			</form>
			
			<ShowAll />
		</div>
	)
}


ReactDOM.render(<App />, document.getElementById('root'))



2.15 - 2.18 Phonebook

import axios from "axios";
import React, {useState, useEffect} from "react";
import ReactDOM from "react-dom";
import Note from "./Note.js";



const App = () => {
	
	const [ persons, setPersons ] = useState([])
	const [ newName, setNewName ] = useState("")
	const [ newNumber, setNewNumber ] = useState("")
	const [ search, setSearch ] = useState("")
	const [ showAll, setShowAll ] = useState(false)
	
	
	
	useEffect(() => {
		Note
			.getAll()
			.then(response => setPersons(response))
	} , [])
	
	const addPersons = (event) => {
		event.preventDefault()
		
		const newObject = {
			name: newName,
			number: newNumber
		}
		
		Note
			.create(newObject)
			.then(response => setPersons(persons.concat(response)))
		
		setNewName("")
		setNewNumber("")
	}
	
	const handleNameChange = (event) => {
		setNewName(event.target.value)
	}
	
	const handleNumberChange = (event) => {
		setNewNumber(event.target.value)
	}
	
	const handleSearch = (event) => {
		setSearch(event.target.value)
		setShowAll(true)
	}
	
	const Filter = (query) => {
		const filter_result = persons.filter(person => person.name.toLowerCase().split(" ").join("").indexOf(query.toLowerCase()) !== -1)
		
		return filter_result
	}
	
	const displayToShow = showAll
	? Filter(search)
	: persons
	
	const handleDelete = (id) => {
		
		axios
			.get(`http://localhost:3001/persons/${id}`)
			.then(response => {
				const result = window.confirm("Do you really want to delete " + response.data.name)
		
					if (result) {
						axios
							.delete(`http://localhost:3001/persons/${id}`)
							.then(response => console.log(response.data))
					} 
					
				setTimeout(() => {
					Note
						.getAll()
						.then(response => setPersons(response))
				}, 1000)
			})
	}

	const handleChange = (name) => {
		const person = persons.find(n => n.name === name) 
		const change = {...person, number:newNumber}
		const id = person.id 
		
		const result = window.confirm(name + " is already added to Phonebook, replace the old number with a new one?")
		
		if (result) {
			Note
				.update(id, change)
				.then(response => setPersons(persons.map(person => person.id === id ? response : person)))
		}
	}
	
	
	
	return (
		<div>
		
			<h2>Phonebook</h2>
			Search by Name: <input value = {search} onChange = {handleSearch} />
		
		
			<h2>Add A New Contact</h2>
			<form onSubmit = {addPersons}>
				Name: <input value = {newName} onChange = {handleNameChange} />
				&nbsp; &nbsp; &nbsp;
				Number: <input value = {newNumber} onChange = {handleNumberChange} />
				<br />
				<br />
				<button type = "submit">ADD</button>
			</form>
			
			
			<br />
			<form onSubmit = {() => handleChange(newName)}>
				<button type = "submit">Change Contact</button>
			</form>
			
			
			<h2>Numbers</h2>
			{displayToShow.map(person => {
				return(
					<div key = {person.id}>
						<p>{person.name}: {person.number}</p>
						<button onClick = {() => handleDelete(person.id)}>Delete</button>
					</div>
				)})
			}
			
		</div>
	)
}


ReactDOM.render(
  <App />, 
  document.getElementById('root'))



/******************************************************Note.js**********************************************************************
import React from 'react';
import axios from "axios";


const baseUrl = "http://localhost:3001/persons"


const getAll = () => {
	const request = axios.get(baseUrl)
	return request.then(response => response.data)
}

const create = (newObject) => {
	const request = axios.post(baseUrl, newObject)
	return request.then(response => response.data)
}

const update = (id, newObject) => {
	const request = axios.put(`${baseUrl}/${id}`, newObject)
	return request.then(response => response.data)
}

const deleteObject = (id) => {
	const request = axios.delete(`${baseUrl}/${id}`)
	return request.then(response => response.data)
}


export default {getAll, create, update}



2.19 Phonebook

const Notification = (props) => {
	const style = {
		color: "green",
		fontSize: 30,
		border: "2px solid green",
		borderRadius: "10px",
		margin: "20px",
		paddingLeft: "20px"
	}
	
	if (props.message === null) {
		return null
	} else {
		return (
			<div style = {style}>
				{props.message}
			</div>
		)
	}
}
